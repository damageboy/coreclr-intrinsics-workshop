using System;
using System.Linq;
using System.Runtime.Intrinsics.X86;
using System.Text;

namespace hi
{
	class Program
	{
		static unsafe void Main(string[] args)
		{
			var bytes = stackalloc sbyte[]
			{
				0x48, 0x64, 0x6A, 0x69, 0x6B, 0x1B, 0x4D, 0x5C, 
				0x59, 0x63, 0x57, 0x67, 0x14, 0x4A, 0x61, 0x63, 
				0x5C, 0x53, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 
				0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02,
			};

			var scalarDiff = stackalloc sbyte[]
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
				0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
				0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			};

			var avx2Diff = stackalloc sbyte[]
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x09, 0x09, 
				0x0A, 0x11, 0x18, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
				0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			};

			if (Avx2.IsSupported) {
                var data = Avx.LoadDquVector256(bytes);
                var diff = Avx.LoadDquVector256(avx2Diff);
                Avx.Store(bytes, Avx2.Add(data, diff));
            }
			else {
				for (var i = 0; i < 32; i++)
					bytes[i] += scalarDiff[i];
			} 
			
			var s = new string(bytes, 0, 32, Encoding.UTF8);
			Console.WriteLine(s);
		}
	}
}
